if user seen some where double quites "<Anything>"--- String

+ -- Concatination or we can say merge two string

if string is coming first and then plus symbol is there - next part automatically convert
 into String
 
 
 if user seen some where void symbol - that is called a Method
 
 
 Inheritance :- Aquaring the properties from other class that is called
 a inheritance and we can achieve with the help of "extends" keyword in java
 
 
 What is Multi level Inheritance
 
 step by step inheritance or we can say generation by generation transformation is called a Multi level inheritnce
 
 
 What is Multiple INheritance
 
 If one class want to inherit more than one class at a time - 
 that is called a Multiple Inheritance
 
 can we achieve multiple inheritance in java
 
 No , we cant achive at class level but we can achieve at interface level 
 
 and interface will discuss later 
 
 what is the major diffrence multiple and multilevel inheritance
 
 what is single inheritance- and inheritance - child parent relation
 
 what is many to one inheritance
 
 what is one to Many inheritance- Multiple Inheritance - Interface level
 at class level is not possible
 
 Assignment :- 
 
 "IS-A" Relation
 "Has-A" Relation - Multiple - which is possible at interface level
 
 
 Method Over riding :-  We have to use same methods name but should 
 be in diffrenet classes and inheritance is mandatory to achieve MOR
 
 MNC where the logo would be same but salary would be change according to the regions
 
 with the help of Method Overriding - Assignment 
 
 
 Method Over loading :- We have use Same Methods but in Same class only
 No inheritance - parameter /Data Type/Signature should be different
 
 
 Data Type 
 by default any whole number - is Integer(int)
 
 
 int -- Whole Number   Medium range
 long -- whole number   high Range
 short -- whole number   Less than integer and higher than byte
 byte-- Whole Number  -- very less range
 
 
 by default any decimal value is - Double
 
 double -- Decimal value -- high Side
 float--- Decimal value -- lower side
 
 char -- 'a' 'b'
 
 boolean--- true/false
 
 
 String - String is not a Data type - it is a class  -- "<Anything>"
 but we will use like a Data Type
 
 
 Constructor:-  
 
 Constructor name and class Name should be same - that is mandatory
 
 If user is not declaring any constructor - jvm will declare blank and default constructor
 
 if user is declaring any constructor - jvm never 
 declare blank and default constructor
 
 Constructor doesnt contains return type - like void
 
 Polymorphism :- Same object behaving different different instance
 through out the execution of the pgm - that is called a Polymorphism
 
 
 we have two type of polymorphism
 
 
 Run Time Polymorphism - Method Over riding , Inheritance , Upcasting
 
 Upcasting - trying to create a object of parent class and call child 
 Constructor
 
 Compile Time Polymorphism - Method Over loading
 
 Assignment :- How we can say that Method overloading is a part of compile Time Polymorphism
 
 
 Super Keyword  - Calling Parent
 
 
 
 Super can be a variable
 
 super can be a Method
 
 Super can be a constructor
 
 super and this constructor should be the first statement only
 
 This Keywork - Current 
 
 this can be a variable
 This can be a Method
 This can be a Constructor
 
 Abstraction- Abstract is a class and it could be a Method As well
 
 - Abstract class should contain Abstract Method or Non Abstract Method
 
 Abstract Method - Unimplemented Method or we can say - no body of that methods
 Non Abstract method means - Implemented Method - 
 Abstract method we can declare if class is Abstract 
 if class is not abstract we cant declare Abstract Method
 
 
 we cant achieve 100 % abstraction in Abstract class why - because abstract class should contain both 
 Abstracct method or non abstract method
 
 Interface - Only Abstract Method - that is more secure
 
 They can contain only Abstract Method - Unimplemented Method
 
 We cant create the object of interface
 
 no need to mention abstract keyword for abstract method - by default 
 it is abstract 
 
 class - class - Extends
 
 interface - interface - extends
 
 interface - class - implements
 
 
 Nested 
 
 Class - class - True
 
 Interface  Interfac e- True
 
 Class - Interface - True
 
 Interface - Class - True 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  